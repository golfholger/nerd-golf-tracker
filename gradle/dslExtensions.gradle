
configurations.all {
    resolutionStrategy {
        ext.replaceName = { params, oldName ->
            def newName = params.with
            eachDependency { details ->
                if (details.requested.name == oldName) {
                    details.useTarget group: details.requested.group, name: newName, version: details.requested.version
                }
            }
        }
    }
}


apply plugin: 'eclipse'
eclipse.project.file { file ->
    ext.addFilteredResources = {
        file.withXml { root -> 
            root.asNode().append new XmlParser().parseText('<filteredResources/>')
        }
    }
    ext.ignoreSvn = {
        file.withXml { root -> 
            addFilter(root, createFilter(type: 26, matcher: 'name', '.svn'))
        }
    }
    ext.ignoreGradleOutputDir = {
        file.withXml { root -> 
            addFilter(root, createFilter(type: 10, matcher: 'projectRelativePath', buildDir.name))
        }
    }
}

import groovy.xml.MarkupBuilder

def addFilter (projectRoot, xml) {
    def filters = projectRoot.node.filteredResources.head()
    filters.append new XmlParser().parseText(xml)
}

def createFilter (filter, matchFor) {
    def writer = new StringWriter()
    def xml = new MarkupBuilder(writer)
    xml.filter() {
        id(new Random().nextInt())
        name()
        type(filter.type)
        matcher {
            id('org.eclipse.ui.ide.multiFilter')
            arguments("1.0-${filter.matcher}-matches-false-false-${matchFor}")
        }
    }
    writer.toString()
}

